name: "CI/CD"

on:
  workflow_dispatch:
  push:
    branches: [ main, talis ]
  pull_request:
    branches: [ main, talis ]

env:
  QT_VERSION: 5.15.2
  BUILD_TYPE: Release
  packageGlob: Translation_Verification-continuous-*.*
  packageGlob2: Translation_Verification-talis-continuous-*.*
  
jobs:
  main_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-amd64"
           , os: ubuntu-18.04
           , QT_INST_DIR: /opt
           , install_depends: "sudo apt-get install -qq libgstreamer-plugins-base1.0-0"
           , bcInstallPrefix: /usr
           , package_name: appdir
           , cpack_generator: cpack
           , rename_package: "mv Translation_Verification-*.tar.xz Translation_Verification-continuous-linux-x86_64.tar.xz"
          }
        - {
            name: "MacOS-amd64"
            , os: macos-latest
            , QT_INST_DIR: /Users/runner
            , package_name: Translation_Verification-macos
            , cpack_generator: cpack -G DragNDrop
            , rename_package: "mv Translation_Verification-*.dmg Translation_Verification-continuous-macos.dmg"
          }
        - {
            name: "Windows-x64", WIN_ARCH: "x64"
            , os: windows-latest
            , QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019_64", QT_ARCH: win64_msvc2019_64
            , install_depends: "choco install ninja openssl"
            , cmake_extra_Options: " -G Ninja"
            , cpack_generator: cpack
            , bcInstallPrefix: Translation_Verification-continuous
            , package_name: Translation_Verification-win64
            , rename_package: "mv Translation_Verification-*.zip Translation_Verification-continuous-win64.zip && mv Translation_Verification-*.exe Translation_Verification-continuous-win64-installer.exe"
          }
        - {
            name: "Windows-x86"
            , os: windows-latest, WIN_ARCH: "amd64_x86"
            , QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019", QT_ARCH: win32_msvc2019
            , install_depends: "choco install ninja openssl"
            , cmake_extra_Options: " -G Ninja"
            , cpack_generator: cpack
            , bcInstallPrefix: Translation_Verification-continuous
            , package_name: Translation_Verification-win32
            , rename_package: "ls -R && mv Translation_Verification-*.zip Translation_Verification-continuous-win32.zip && mv Translation_Verification-*.exe Translation_Verification-continuous-win32-installer.exe"
          }
    steps:

    - name: Checkout main branch 
      uses: actions/checkout@v2
      with:
        ref: main
    
    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{matrix.config.WIN_ARCH}}

    - name: Install Depends
      run: ${{matrix.config.install_depends}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
       dir: ${{matrix.config.QT_INST_DIR}}
       arch: ${{matrix.config.QT_ARCH}}
       version: ${{env.QT_VERSION}}
       
    - name: Build Translation_Verification
      id: main_build
      run: |
        cmake -S. ${{matrix.config.cmake_extra_Options}} -DCMAKE_INSTALL_PREFIX=${{matrix.config.bcInstallPrefix}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
        cmake --build . --config ${{env.BUILD_TYPE}}
        cmake --install . --prefix ${{matrix.config.package_name}}

    - name: CPack
      run: ${{matrix.config.cpack_generator}}
      
    - name: Build AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        export VERSION=continuous
        chmod a+x linuxdeployqt*.AppImage
        unset QTDIR; unset QT_PLUGIN_PATH; unset LD_LIBRARY_PATH
        ./linuxdeployqt*.AppImage ./appdir/share/applications/*.desktop -appimage -extra-plugins=iconengines,platformthemes/libqxdgdesktopportal.so
        
    - name: Prepare Upload
      shell: bash
      run: ${{matrix.config.rename_package}}

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ github.workspace }}/${{env.packageGlob}}
          
  talis_build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
           name: "Linux-amd64"
           , os: ubuntu-18.04
           , QT_INST_DIR: /opt
           , install_depends: "sudo apt-get install -qq libgstreamer-plugins-base1.0-0"
           , bcInstallPrefix: /usr
           , cpack_generator: cpack
           , package_name: appdir
           , rename_package: "mv Translation_Verification-*.tar.xz Translation_Verification-talis-continuous-linux-x86_64.tar.xz && mv Translation_Verification-*.AppImage Translation_Verification-talis-continuous-x86_64.AppImage"
          }
        - {
            name: "MacOS-amd64"
            , os: macos-latest
            , QT_INST_DIR: /Users/runner
            , package_name: Translation_Verification-macos
            , cpack_generator: cpack -G DragNDrop
            , rename_package: "mv Translation_Verification-*.dmg Translation_Verification-talis-continuous-macos.dmg"
          }
        - {
            name: "Windows-x64", WIN_ARCH: "x64"
            , os: windows-latest
            , QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019_64", QT_ARCH: win64_msvc2019_64
            , install_depends: "choco install ninja openssl"
            , cmake_extra_Options: " -G Ninja"
            , bcInstallPrefix: Translation_Verification-continuous
            , package_name: Translation_Verification-win64
            , cpack_generator: cpack
            , rename_package: "mv Translation_Verification-*.zip Translation_Verification-talis-continuous-win64.zip && mv Translation_Verification-*.exe Translation_Verification-talis-continuous-win64-installer.exe"
          }
        - {
            name: "Windows-x86"
            , os: windows-latest, WIN_ARCH: "amd64_x86"
            , QT_INST_DIR: "C:/", QTDIR: "C:/Qt/5.15.2/msvc2019", QT_ARCH: win32_msvc2019
            , install_depends: "choco install ninja openssl"
            , cmake_extra_Options: " -G Ninja"
            , bcInstallPrefix: Translation_Verification-continuous
            , package_name: Translation_Verification-win32
            , cpack_generator: cpack
            , rename_package: "ls -R && mv Translation_Verification-*.zip Translation_Verification-talis-continuous-win32.zip && mv Translation_Verification-*.exe Translation_Verification-talis-continuous-win32-installer.exe"
          }
    steps:

    - name: Checkout talis branch 
      uses: actions/checkout@v2
      with:
        ref: talis
    
    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{matrix.config.WIN_ARCH}}

    - name: Install Depends
      run: ${{matrix.config.install_depends}}

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.14.0
      with:
       dir: ${{matrix.config.QT_INST_DIR}}
       arch: ${{matrix.config.QT_ARCH}}
       version: ${{env.QT_VERSION}}
       
    - name: Build Translation_Verification
      run:  |
        cmake -S. ${{matrix.config.cmake_extra_Options}} -DCMAKE_INSTALL_PREFIX=${{matrix.config.bcInstallPrefix}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
        cmake --build . --config ${{env.BUILD_TYPE}}
        cmake --install . --prefix ${{matrix.config.package_name}}

    - name: CPack
      run: ${{matrix.config.cpack_generator}}
      
    - name: Build AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        export VERSION=continuous
        chmod a+x linuxdeployqt*.AppImage
        unset QTDIR; unset QT_PLUGIN_PATH; unset LD_LIBRARY_PATH
        ./linuxdeployqt*.AppImage ./appdir/share/applications/*.desktop -appimage -extra-plugins=iconengines,platformthemes/libqxdgdesktopportal.so
        
    - name: Prepare Upload
      shell: bash
      run: ${{matrix.config.rename_package}}

    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{ github.workspace }}/${{env.packageGlob2}}

  Releases:
    name: Release
    needs: [main_Build, talis_build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v2

    - name: Move Files
      run: |
        mv artifact/* ${{github.workspace}}
    - name: Deploy Package
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
       repo_token: "${{ secrets.DEPLOYTOKEN }}"
       automatic_release_tag: "v1.0.0"
       prerelease: false
       title: "Continuous Build"
       files: |
        ${{env.packageGlob}}
        ${{env.packageGlob2}}
